PhaseToCore
===========

node (c : bool)
  returns (n)
  assumes ()
  shows ()
let
  when_c$1 : int when c
    = 0 when c
   
  when_c : int when c
    = 1 when c
   
  pre_x : int when c
    = pre x
   
  x : int when c
    = when_c$1 -> Add(when_c, pre_x)
   
  current_x : int
    = current x
   
  pre_n : int
    = pre n
   
  init_pre_n : int
    = 17 -> pre_n
   
  n : int
    = ITE(c, current_x, init_pre_n)
tel

--- Step 1 ---
c : bool  = False
n = 17
--- Step 2 ---
c : bool  = False
n = 17
--- Step 3 ---
c : bool  = True
n = 0
--- Step 4 ---
c : bool  = False
n = 0
--- Step 5 ---
c : bool  = False
n = 0
--- Step 6 ---
c : bool  = True
n = 1
--- Step 7 ---
c : bool  = True
n = 2
--- Step 8 ---
c : bool  = False
n = 2
--- Step 9 ---
c : bool  = False
n = 2
--- Step 10 ---
c : bool  = (EOF)
